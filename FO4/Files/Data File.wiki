'''File Extension:''' <code>.esm</code>, <code>.esp</code>, <code>.esl</code>, <code>.fos</code>

A '''Data File''' acts as a database of all of the data for the world, including object data, dialogue, gameplay settings, object placements, AI settings, landscape, cells, etc.

==Files==
There are three types of data files -- Master Files and Plugin Files, and new as of the 1.10 Update, Light Master files.
Master files (normal and Light) and plugins are largely identical in format, but have some important distinctions in practice.

===Master===
<code>.esm</code>

*The [[Creation Kit]] will not create master files.
** NOTE: An exception to this rule is when using the Creation Kit's built in version control system. The merging process takes the interim esp data and merges into a master file to be used by the collaborators. See this page for details [[Version Control and Multiple Contributor Collaboration]]

===Plugin===
<code>.esp</code>

*A plugin ESP file created in the [[Creation Kit]] may only rely on data from itself and any master ESM files.
**Plugins are '''not''' required to contain any data.
**Plugins are '''not''' required to have a master if they are empty or add '''new''' content.
**Plugins can only refer directly to data from a master file, though they can refer to multiple master files.
**Plugins can only refer to information in another plugin indirectly by using scripts.
*It's also possible to create plugins that depend on other plugins using third-party tools.

===Light Master===
<code>.esl</code>

*Light Master (.esl) files are a new optimized file format, introduced in Fallout 4 v1.10. They behave like a normal plugin, except for the following:
**.esl files cannot be edited in the [[Creation Kit]]. Active development should be done in an normal .esp file.
**.esl files allow more plugins to be loaded than the previous 8-bit plugin ID limit (255), by using more of the Form ID for their load order.
**.esl files have a budget of no more than 2,048 forms, with Form IDs <code>0x800</code> to <code>0xFFF</code> available for use.
***A absolute maximum of 4096 .esl files can be loaded by the engine at once, but in practice this is difficult to achieve.
***331 plugins can be loaded that each contain 2048 ALCH records, but 970+ plugins can be loaded that each contain one CELL record and 2047 REFR records.
***There may also be a file handle limit, and a reference limit that prevent 4096 .esl files from being loaded.
**.esl files are merged into plugin slot <code>0xFE</code> at runtime. Their runtime Form ID is <code>0xFE[000](Hex Load Order)[000](Original Form ID)</code>.
***Form <code>0xFA0</code> from the 10th loaded .esl file would be <code>0xFE00AFA0</code> at runtime. From the 200th .esl file, it would be <code>0xFE0C8FA0</code>.

*To convert a normal plugin (.esp) to a light (.esl) master, load your .esp file, and under File, select Convert Active File to Light Master.
*It is good practice to run Compact Active File Form IDs to optimize your Form IDs within the 2,048 form budget before converting.
**Compacting Form IDs does also change Form IDs in the .esp file, so be sure do this before converting to .esl, and be sure to save the .esp file afterwards.
**Do not compact Form IDs on an .esp file you have already released and are updating. Because Form IDs change, you essentially create a new plugin when compacting, and this new plugin will not be compatible with saves using the old version.

*Updating .esl files has more restrictions than updating .esp files, but not many.
**Because of the 2,048 Form ID limit, it is important to be careful when deleting forms not to reuse Form IDs.
***A saved weapon form could be deleted in your plugin, then have an armor form take the FormID when compacted.
**Again, be sure to save compacted .esp files, because otherwise compacting again with new forms might give different Form IDs for forms already in a game save.
**As long as development is done on compacted .esp files that match released .esl files, forms can be added under the 2,048 form limit, and existing forms can be edited without issue.

*.esl Files released by Bethesda Game Studios (Creation Club releases) are flagged as master files and always load immediately after the official Bethesda masters, in the order specified by the game's <code>.ccc</code> file. These .esl files cannot be deactivated.
*.esl Files released by modders are flagged the same as .esp files, but these '''also''' load with the master files, in the order specified in plugins.txt. These .esl files will need to be activated before the game will load them.
*.esl Files created by modders cannot use standard .esp files as masters or this will cause the .esp file to also load before the .esl in the master files section. This is new behavior for the game engine as of Skyrim Special Edition v1.5.3.
** Any dependencies of the normal plugin a light master depends on are '''not''' loaded early.
** Creating light masters that are dependent on normal plugins is highly discouraged.

===Save===
<code>.fos</code>

*A Fallout Save (.fos) is used to restore the games state between sessions.
*The [[Creation Kit]] will not create, edit or view save files.

==Tooling==
*The [[Creation Kit]] is the primary tooling for working with data files.
*[[xEdit]]
*There are other community software projects that provided tooling for working with data files.

==Notes==
*By tradition, the file extensions stand for '''E'''lder '''S'''crolls '''M'''aster and '''E'''lder '''S'''crolls '''P'''lugin.
*While not directly supported, a .esl can be converted back to a .esp for editing in one of the following ways.
*#Rename the file back to .esp. Open it for editing with FO4Edit, and in the Header section edit the flags to trigger a resave. Simply choosing the ESM flag on and off again will suffice. Then save. It will then be binary identical to the original .esp it was created from.
*#With the current version of the [[Creation Kit]] (1.10 at time of writing) you can also simply rename the .esl to .esp and open it. The Creation Kit will identify it as a plugin ignoring the header flag and allow editing. When You are finished you just save like normal. If you save as a normal .esp the header is automatically converted back to that of a standard plugin. You may use the convert to .esl function to publish the file as a .esl master again. This behavior may change in the future.

== See Also ==
*[[Version Control and Multiple Contributor Collaboration]]
*[[:Category:Game Files|Game Files Category]]


[[Category:Editor Reference]]
[[Category:Game Files]]
