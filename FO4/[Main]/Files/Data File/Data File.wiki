'''File Extension:''' <code>.esm</code>, <code>.esl</code>, <code>.esp</code>, <code>.fos</code>, <code>.fid</code>, <code>.fud</code>, <code>.fvd</code>, <code>.ccc</code>

A '''Data File''' acts as a database of all of the data for the world, including object data, dialogue, gameplay settings, object placements, AI settings, landscape, [[Cell]]s, etc.
There are several kinds of files associated with data files.
Masters, Light Masters, and Plugins are largely identical in format, but have some important distinctions in practice.
Other files associated with game data include [[#Game Save|Game Saves]], [[Version Control]] meta, and temporary files generated by the [[Creation Kit]].

== Master ==
<code>.esm</code>
<BR>
The [[Creation Kit]] will not create master files without additional enabling the Creation Kit's built in [[Version Control]] system.
The merging process takes the interim ESP data and merges into a master ESM file to be used by the collaborators.

==== Removing ESM Files ====
While ESP files can usually be removed from gameplay simply by de-activating them, ESM files cannot be removed in this way.
In short the [[Creation Engine]] refuses to remove an ESM from the save game.
However, this can easily overcome by modifying the savegame to think that the ESM was actually an ESP -- at which point the game engine will happily remove it.
(See Wrye Bash: Disabling Masters.)


== Light Master ==
<code>.esl</code>
<BR>
[[Fallout 4|Fallout 4 v1.10+]]
<BR>
The ''Light Master'' (.esl) file is a new optimized file format introduced in the v1.10 update.
Using ''Light Master'' files will allow more plugins to be loaded than the previously possible due to the 8-bit plugin ID limit of '''255'''.
A ''Light Master'' does this by using more of the ''Form ID'' range for load order, while also sacrificing it's maximum capacity for form records.

A ''Light Master'' file cannot be edited in the [[Creation Kit]].
Active development should be done in an normal <code>*.esp</code> plugin file.

==== Light Master Notes ====
*''Light Master'' files released by Bethesda Game Studios ([[Creation Club]] releases) are flagged as master files and always load immediately after the official Bethesda masters, in the order specified by the game's <code>.ccc</code> file. These .esl files cannot be deactivated.
*''Light Master'' files released by modders are flagged the same as ESP files, but these '''also''' load with the master files, in the order specified in <code>plugins.txt</code>. These .esl files will need to be activated before the game will load them.
*''Light Master'' files created by modders cannot use standard ESP files as masters or this will cause the ESP file to also load before the .esl in the master files section. This is new behavior for the game engine as of Skyrim Special Edition v1.5.3.
** Any dependencies of the normal plugin a light master depends on are '''not''' loaded early.
** Creating light masters that are dependent on normal plugins is highly discouraged.

==== Light Master Budgets ====
A ''Light Master'' file has a budget of no more than 2,048 forms, with Form IDs <code>0x800</code> to <code>0xFFF</code> available for use.
A absolute maximum of 4096 ESL files can be loaded by the engine at once, but in practice this is difficult to achieve.
331 plugins can be loaded that each contain 2048 [[ALCH]] records, but 970+ plugins can be loaded that each contain one [[CELL]] record and 2047 [[REFR]] records.
There may also be a file handle limit, and a reference limit that prevent 4096 ESL files from being loaded.

==== Light Master Runtime ====
''Light Master'' files are merged into plugin slot <code>0xFE</code> at runtime.
Their runtime Form ID is <code>0xFE[000](Hex Load Order)[000](Original Form ID)</code>.

Form <code>0xFA0</code> from the 10th loaded ESL file would be <code>0xFE00AFA0</code> at runtime.
From the 200th ESL file, it would be <code>0xFE0C8FA0</code>.

==== Light Master Publishing ====
To publish an (.esp) plugin as an (.esl) light master, load your ESP file, and under ''File'', select ''Convert Active File to Light Master''.
It is good practice to run ''Compact Active File'' Form IDs to optimize your Form IDs within the 2,048 form budget before converting.
Compacting Form IDs does also change Form IDs in the ESP file, so be sure do this before converting to ESL, and be sure to save the ESP file afterwards.

Do not compact Form IDs on an ESP file you have already released and are updating.
Because Form IDs change, you essentially create a new plugin when compacting.
This new plugin will not be compatible with saves using the old version.

==== Light Master Updating ====
Updating ESL files has more restrictions than updating ESP files, but not many.
Because of the 2,048 Form ID limit, it is important to be careful when deleting forms not to reuse Form IDs.
A saved weapon form could be deleted in your plugin, then have an armor form take the Form ID when compacted.

Be sure to save ESP files after running ''Compact Active File'', because otherwise compacting again with new forms might give different Form IDs for forms already in a game save.
As long as development is done on compacted ESP files that match released ESL files, forms can be added under the 2,048 form limit, and existing forms can be edited without issue.

==== Light Master to Plugin Conversion ====
While not directly supported, an ESL can be converted back into an ESP for direct editing.

As of '''Update v1.10+''', simply rename the ESL file extension to <code>*.esp</code>.
With the renamed file extension, the [[Creation Kit]] will load the ESL as a standard ESP plugin.
When ''Active Plugin'' is saved, the [[Creation Kit]] will complete the conversion by removing the master header flag.
The ESl is now converted into an ESP plugin file.

The ''Convert Active File to Light Master'' command may be used to publish the file as an ESL light master again.

==== Light Master to Plugin Manual Conversion ====
Before '''Update v1.10''', manually converting a light master to a plugin was not supported by the [[Creation Kit]].
To manually convert a light master to a plugin, do the following.
# Rename the file back to <code>.esp</code> and open it for editing with [[xEdit]],
# In the '''Header''' section, edit the flags to trigger a resave. Simply choosing the '''ESM''' flag on and off again will suffice.
# Save the modified plugin. It will then be a binary identical to the original <code>*.esp</code> it was created from.


== Plugin ==
<code>.esp</code>
<BR>
A plugin ESP file created in the [[Creation Kit]] may only rely on data from itself and any master ESM files.
It's also possible to create plugins that depend on other plugins using third-party tools.
*Plugins are '''not''' required to contain any data.
*Plugins are '''not''' required to have a master if they are empty or add '''new''' content.
*Plugins can only refer directly to data from a master file, though they can refer to multiple master files.
*Plugins can only refer to information in another plugin indirectly by using scripts.


== Game Save ==
<code>.fos</code>
<BR>
A Fallout Save (.fos) is used to restore the games state between sessions.
The [[Creation Kit]] cannot create, edit, or view save files.


== Version Control ==
<code>.fid</code>, <code>.fud</code>, <code>.fvd</code>
<BR>
The FID, FUD, and FVD files are generated by the [[Version Control]] system.
These files are used by the [[Creation Kit]] to track and merge changes between file versions.


= Tooling =
*The [[Creation Kit]] is the primary tooling for working with data files.
*[[xEdit]]
*[[Wrye Bash]]
*There are other community software projects that provided tooling for working with data files.


= Notes =
*By tradition, the file extensions stand for '''E'''lder '''S'''crolls '''M'''aster and '''E'''lder '''S'''crolls '''P'''lugin.


= See Also =
*[[Version Control]]
*[[Game Files]]

== Links ==
* https://cs.elderscrolls.com/index.php?title=Esp_vs._Esm
* https://cs.elderscrolls.com/index.php?title=De-Isolation_Tutorial


[[Category:Editor Reference]]
[[Category:Game Files]]